---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BlogBase from '@/layouts/BlogBase.astro';
import Hero from '@/components/app/Hero.astro';
import SpotlightCardsGallery from '@/components/atoms/spotlight-cards-gallery/SpotlightCardsGallery.astro';
import SpotlightPostCard from '@/components/atoms/spotlight-post-card/SpotlightPostCard.astro';
import { Icon } from 'astro-icon/components'
import { Badge } from '@/components/atoms/badge/index.ts'
import Container from '@/components/atoms/container/Container.astro';

export interface Props {
  posts: CollectionEntry<'post'>;
  publishedPosts: CollectionEntry<'post'>[];
  tags: string[]
}

export async function getStaticPaths() {
  const publishedPosts = await getCollection('post', (post) => (import.meta.env.MODE === "production" ? !post.data.isDraft : true));
  const tags = [...new Set(publishedPosts.map((post) => post.data.tags).flat())];
  return tags.flatMap((tag) => [{ params: { slug: tag }, props: { publishedPosts, tags } }]);
}
const { slug } = Astro.params;
const { publishedPosts, tags } = Astro.props;
const avaliableCurrentTagPosts = publishedPosts
  .filter((post) => post.data.tags.includes(slug as string))
  .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime());
---

<BlogBase title={`搜尋文章標籤：${slug}`} description={`搜尋文章標籤`}>
  <Hero>
    <div slot="beforeHeadline" class="flex mx-0 md:mx-auto gap-4 md:gap-8">
      <Badge>
        <a data-cy="tags-link" class="flex gap-2 items-center" href="/post/tags/">
          <Icon 
          class=""
          name="material-symbols:label-important-outline-rounded"
          size={24}
          ></Icon>
          查看 { tags.length } 種標籤
        </a>
      </Badge>
    </div>
    <Fragment slot="headline">搜尋文章標籤：{slug}</Fragment>
  </Hero>
  <Container>
    <SpotlightCardsGallery>
      {
        avaliableCurrentTagPosts.map((post) => {
          const { data } = post 
          return (
          <SpotlightPostCard
            post={{
              categoryHref: `/post/categories/${post.data.category}/`,
              tagHrefs: post.data.tags.map((tag) => `/post/tags/${tag}/`),
              slug: post.slug,
              ...data,
            }}
          />
          )
        })
      }
    </SpotlightCardsGallery>
  </Container>
</BlogBase>
