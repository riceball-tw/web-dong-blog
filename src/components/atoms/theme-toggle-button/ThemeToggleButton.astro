---
// https://astro-tips.dev/recipes/dark-mode/#full-code
/* This button will switch between the default theme and the opposite of that
 *
 * If the default theme is auto it will toggle between auto and the opposite of the systemTheme
 *
 * If the default theme is not auto it will never enter auto mode
 *
 * Set the themeIconRelationship to determine the behavior of the icon, match will have moon icon displayed while dark theme is active
 *
 */

 type Props = {
  themeIconRelationship?: "match" | "opposite" | undefined;
};

const { themeIconRelationship = "opposite" } = Astro.props;
---

<theme-toggle-button data-cy="theme-toggle"></theme-toggle-button>

<script is:inline data-theme-icon-relationship={themeIconRelationship}>
  if (!customElements.get("theme-toggle-button")) {
    const themeIconRelationship = document.currentScript.getAttribute(
      "data-theme-icon-relationship",
    );
    class ThemeToggleButton extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });
        this.toggleTheme = this.toggleTheme.bind(this);
        this.updateThemeIconAndAriaLabel =
          this.updateThemeIconAndAriaLabel.bind(this);
      }

      connectedCallback() {
        this.render();
        this.bindEvents();
        this.updateThemeIconAndAriaLabel();
      }

      disconnectedCallback() {
        this.removeEventListener("click", this.toggleTheme);
        document.removeEventListener(
          "theme-changed",
          this.updateThemeIconAndAriaLabel,
        );
      }

      render() {
        this.shadowRoot.innerHTML = `
                <style>
                    .toggle-button {
                        display: inline-block;
                        background-color: transparent;
                        border: none;
                        color: inherit;
                        padding: 0;
                        cursor: pointer;
                    }

                    .icon {
                      opacity: 0.6;
                    }

                    .icon:hover {
                      opacity: 1;
                    }

                </style>
                <button data-cy="theme-toggle-button" class="toggle-button" type="button">
                  <svg class="icon" id="moon" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 21q-3.775 0-6.387-2.613T3 12q0-3.45 2.25-5.988T11 3.05q.325-.05.575.088t.4.362t.163.525t-.188.575q-.425.65-.638 1.375T11.1 7.5q0 2.25 1.575 3.825T16.5 12.9q.775 0 1.538-.225t1.362-.625q.275-.175.563-.162t.512.137q.25.125.388.375t.087.6q-.35 3.45-2.937 5.725T12 21"/></svg>

                  <svg class="icon" id="sun" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 17q-2.075 0-3.537-1.463T7 12t1.463-3.537T12 7t3.538 1.463T17 12t-1.463 3.538T12 17M2 13q-.425 0-.712-.288T1 12t.288-.712T2 11h2q.425 0 .713.288T5 12t-.288.713T4 13zm18 0q-.425 0-.712-.288T19 12t.288-.712T20 11h2q.425 0 .713.288T23 12t-.288.713T22 13zm-8-8q-.425 0-.712-.288T11 4V2q0-.425.288-.712T12 1t.713.288T13 2v2q0 .425-.288.713T12 5m0 18q-.425 0-.712-.288T11 22v-2q0-.425.288-.712T12 19t.713.288T13 20v2q0 .425-.288.713T12 23M5.65 7.05L4.575 6q-.3-.275-.288-.7t.288-.725q.3-.3.725-.3t.7.3L7.05 5.65q.275.3.275.7t-.275.7t-.687.288t-.713-.288M18 19.425l-1.05-1.075q-.275-.3-.275-.712t.275-.688q.275-.3.688-.287t.712.287L19.425 18q.3.275.288.7t-.288.725q-.3.3-.725.3t-.7-.3M16.95 7.05q-.3-.275-.288-.687t.288-.713L18 4.575q.275-.3.7-.288t.725.288q.3.3.3.725t-.3.7L18.35 7.05q-.3.275-.7.275t-.7-.275M4.575 19.425q-.3-.3-.3-.725t.3-.7l1.075-1.05q.3-.275.712-.275t.688.275q.3.275.288.688t-.288.712L6 19.425q-.275.3-.7.288t-.725-.288"/></svg>
                </button>
                `;
        this.updateThemeIconAndAriaLabel();
      }

      bindEvents() {
        this.addEventListener("click", this.toggleTheme);
        document.addEventListener("theme-changed", (e) =>
          this.updateThemeIconAndAriaLabel(
            e.detail.currentTheme,
            e.detail.systemTheme,
          ),
        );
      }

      toggleTheme() {
        const currentTheme = theme.getTheme();
        const defaultTheme = theme.getDefaultTheme();
        const systemTheme = theme.getSystemTheme();
        let newTheme;

        if (defaultTheme === "auto") {
          newTheme =
          // External Code Ignore lint
          /* eslint-disable no-nested-ternary */
            currentTheme === "auto" || currentTheme === systemTheme
              ? systemTheme === "dark"
                ? "light"
                : "dark"
              : "auto";
        } else {
          newTheme =
            currentTheme === defaultTheme
              ? defaultTheme === "dark"
                ? "light"
                : "dark"
              : currentTheme === "auto"
                ? systemTheme === "dark"
                  ? "light"
                  : "dark"
                : defaultTheme;
        }
        /* eslint-enable */

        theme.setTheme(newTheme);
        this.updateThemeIconAndAriaLabel(newTheme, systemTheme);
      }

      updateThemeIconAndAriaLabel(
        currentTheme = theme.getTheme(),
        systemTheme = theme.getSystemTheme(),
      ) {
        const sunIcon =
          themeIconRelationship === "opposite"
            ? this.shadowRoot.querySelector("#sun")
            : this.shadowRoot.querySelector("#moon");
        const moonIcon =
          themeIconRelationship === "opposite"
            ? this.shadowRoot.querySelector("#moon")
            : this.shadowRoot.querySelector("#sun");

        sunIcon.style.display =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "block"
            : "none";
        moonIcon.style.display =
          currentTheme === "light" ||
          (currentTheme === "auto" && systemTheme === "light")
            ? "block"
            : "none";
        const newMode =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "light"
            : "dark";
        this.shadowRoot
          .querySelector("button")
          .setAttribute(
            "aria-label",
            `${newMode}`,
          );
      }
    }

    customElements.define("theme-toggle-button", ThemeToggleButton);
  }
</script>
