---
import { Skeleton } from "@/components/atoms/skeleton/index.ts";
---

<div data-cy="post-comment" data-pagefind-ignore class="comment py-8" style="min-height: 367px">
  <!-- Avatar -->
  <Skeleton style="width: var(--size-avatar); height: var(--size-avatar);" class="comment-avatar"/>
  <!-- Info -->
  <Skeleton style="width: 237px; height: var(--height-info)" class="comment-info"/>
  <!-- Comment Panel -->
  <Skeleton style="height: 196px;" class="comment-chat">
    <!-- Tabs -->
    <Skeleton style="height: 48px;" class="px-2 pt-2 flex border-x-0 border-t-0 rounded-none">
      <Skeleton class="rounded-b-none px-4 py-2 w-fit border-b-0 -mb-px">
        <div style="width: 33px; height: 23px;"></div>
      </Skeleton>
      <Skeleton class="rounded-b-none px-4 py-2 w-fit border-b-0 -ml-px">
        <div style="width: 47px; height: 23px;"></div>
      </Skeleton>
    </Skeleton>
    <!-- Commnt textarea -->
    <div class="px-2 py-2">
      <Skeleton class="px-4 py-2">
        <div style="width: 100%; height: 72px;"></div>
      </Skeleton>
    </div>
    <!-- Comment Footer -->
    <div class="pb-8 px-2 gap-2 flex justify-between items-center">
      <Skeleton style="width: 209px; height: 18px;" />
      <Skeleton style="width: 95px; height: 32px;" />
    </div>
  </Skeleton>
</div>

<style is:inline>
  .comment {
    --size-avatar: 44px;
    --height-info: 21px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    display: hidden;
  }

  .comment-avatar {
    display: none;
  }

  @media (min-width: 576px) {
    .comment {
      display: grid;
      grid-template-columns: var(--size-avatar) 1fr; 
      grid-template-rows: var(--height-info) 1fr; 
      grid-template-areas: 
      ". info"
      "avatar chat"; 
    }

    .comment-avatar {
      grid-area: avatar;
      display: block;
    }

    .comment-info {
      grid-area: info;
    }

    .comment-chat {
      grid-area: chat;
    }
  }
</style>

<script is:inline>
  function isDark() {
    const isSystemPerferDark =
      !('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const isLocalStorageDark = localStorage.theme === 'dark';
    return isLocalStorageDark || isSystemPerferDark;
  }

  function loadUtterancesScript() {
    return new Promise((resolve, reject) => {
      const theme = isDark() ? 'github-dark' : 'github-light';
      const script = document.createElement('script');
      script.src = 'https://utteranc.es/client.js';
      script.setAttribute('repo', 'riceball-tw/Blog-comment');
      script.setAttribute('issue-term', 'title');
      script.setAttribute('theme', theme);
      script.setAttribute('crossorigin', 'anonymous');
      script.setAttribute('async', '');
      script.onload = resolve(script);
      script.onerror = reject;
    });
  }

  function miniumTimer(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    })
  } 

  async function generateUtterance() {
    const comment = document.querySelector('.comment');
    const [script] = await Promise.all([loadUtterancesScript(), miniumTimer(300)])
    comment.innerHTML = '';
    comment.appendChild(script);
  }

  window.addEventListener('updateTheme', () => {
    generateUtterance();
  });
</script>