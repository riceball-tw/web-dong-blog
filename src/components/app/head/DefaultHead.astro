---
import { SEO } from 'astro-seo';
import type { GlobalHead } from '@/types';
import { languageTags, regionTags, prefixDefaultLocale } from '@/utils/i18n.ts';
import { currentLocaleWebsiteConfig } from '@/utils/getWebsiteConfig.ts';
import { type LanguageKey } from '@/utils/i18n.ts';

export interface Props extends GlobalHead {}

const { title, description, thumbnail } = Astro.props;
const { brand } = (await currentLocaleWebsiteConfig(Astro.currentLocale as LanguageKey)).data;
const seoTitle = `${title || brand.slogan } - ${ brand.name }`;
const seoDescription = description || brand.description;
const seoImage = {
  src: thumbnail?.src
    ? new URL(`${thumbnail.src}/og.png`, Astro.url)
    : new URL(brand.thumbnail.src, Astro.url),
  width: thumbnail?.width ?? brand.thumbnail.width,
  height: thumbnail?.height ?? brand.thumbnail.height,
  alt: thumbnail?.alt ?? brand.thumbnail.alt,
};

function getPathnameWithoutLocale(pathname: string) {
  return pathname.replace(`/${Astro.currentLocale}`, '').replace(/\/?$/, '/');
}
---

<SEO
      charset="UTF-8"
      title={seoTitle}
      description={seoDescription}
      openGraph={{
        basic: {
          title: `${seoTitle}`,
          type: 'website',
          image: `${seoImage.src}`,
        },
        image: {
          type: 'image/jpeg',
          alt: `${seoImage.alt}`,
          width: seoImage.width,
          height: seoImage.height,
        },
      }}
      twitter={{
        title: `${seoTitle}`,
        description: `${seoDescription}`,
        image: `${seoImage.src}`,
        imageAlt: `${seoImage.alt}`,
      }}
      extend={{
        link: [
          // @ts-ignore
          // Link 'sizes' property is DOMTokenList type not string
          // https://github.com/jonasmerlin/astro-seo/issues/87
          { rel: 'icon', href: '/images/brand/favicon/favicon.ico', sizes: '32x32' },
          { rel: 'icon', href: '/images/brand/favicon/logo.svg', type: 'image/svg+xml' },
          { rel: 'apple-touch-icon', href: '/images/brand/favicon/apple-touch-icon.png' },
          { rel: 'manifest', href: '/manifest.webmanifest' },
          {
            rel: 'sitemap',
            href: '/sitemap-index.xml',
            type: 'application/xml',
          },
          // Default Language Alternates
          {
            rel: "alternate",
            hreflang: "x-default",
            href: new URL(
            getPathnameWithoutLocale(Astro.url.pathname) ,
              Astro.site
            ).toString()
          },

          // Language Alternates - Region
          ...(Object.keys(regionTags) as Array<keyof typeof regionTags>).map(tag => {
            const regionMap = {
              zh: 'zh-tw' 
            }
            return ({
            rel: "alternate",
            hreflang: tag,
            href: new URL(regionMap[tag] + getPathnameWithoutLocale(Astro.url.pathname),
              Astro.site
            ).toString()
          })}),

          // Language Alternates - Countries
          ...Object.keys(languageTags).map(tag => ({
            rel: "alternate",
            hreflang: tag,
            href: new URL(!prefixDefaultLocale 
                ? tag + getPathnameWithoutLocale(Astro.url.pathname) 
                : Astro.url.pathname,
              Astro.site
            ).toString()
          })),

          // RSS Autodiscovery
          // https://www.rssboard.org/rss-autodiscovery
          {
            rel:"alternate",
            type:"application/rss+xml",
            title:`${seoTitle}`,
            href:"/rss.xml"
          }
        ],
        meta: [
          {
            name: 'viewport',
            content: 'width=device-width, initial-scale=1, viewport-fit=cover',
          },
          {
            name: 'theme-color',
            content: brand.themeColor,
          },
        ],
      }}
    />