---

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
}

const { headings } = Astro.props
---
 <div data-pagefind-ignore="all" class="p-4">
  {
    Boolean(headings.length) && (
      <div class="">
        <ul data-toc class="toc m-0 list-none p-0">
          {headings.map(({ depth, slug: headingSlug, text }) => (
            <li>
              <a
                class={`block transition-opacity ${depth <= 2 ? 'mt-3' : 'mt-2 pl-3 text-sm'}`}
                href={`#${headingSlug}`}
                aria-label={`移動到 ${text} 標題區塊`}
              >
                {text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )
  }
</div>

<script>
  const linkClass = 'opacity-60'
  const activeLinkClass = 'opacity-100'

  function generateTOC() {
    const headings = document.querySelectorAll('[data-article] h2, h3');
    const tocHeadings = document.querySelectorAll('[data-toc] a');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          tocHeadings.forEach((heading) => {
            heading.classList.remove(activeLinkClass);
            heading.classList.add(linkClass);
            if (entry.target.textContent === heading?.textContent?.trim()) {
              heading.classList.add(activeLinkClass);
              heading.classList.remove(linkClass);
            }
          });
        }
      });
    });

    return { headings, observer };
  }

  generateTOC().headings.forEach((heading) => {
    generateTOC().observer.observe(heading);
  });
</script>