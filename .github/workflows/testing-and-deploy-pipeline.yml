name: Testing and Deploy Pipeline

on:
  push:

jobs:
  # ESLint + Prettier
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Environment Setup
        uses: ./.github/actions/setup

      - name: Run paraglide i18n compiler
        run: npx @inlang/paraglide-js compile --project ./project.inlang --outdir ./src/paraglide

      - name: Run Lint
        run: pnpm lint

  # TypeScript Check
  typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Environment Setup
        uses: ./.github/actions/setup

      - name: Run Typecheck
        run: pnpm typecheck

  # Cypress E2E
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout external content
        uses: actions/checkout@v4
        with:
          repository: riceball-tw/obsidian-sync
          ref: main
          path: src/content-temp/
          token: ${{ secrets.CHECKOUT_GITHUB_CONTENT_PAT }}
          lfs: true

      - name: Merge local and external content folder
        run: rsync -av --ignore-existing src/content-temp/ src/content/

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          # To avoid missing Cypress binrary, Skip Cahce Here, cypress-io/github-action has it's cache on node_moduels too
          # cache: 'pnpm'

      - name: E2E
        uses: cypress-io/github-action@v6
        with:
          start: pnpm dev

  build:
    needs: [lint, typecheck, e2e]
    runs-on: ubuntu-latest
    env:
      YOUTUBEAPIKEY: ${{ secrets.YOUTUBEAPIKEY }}
      PUBLIC_GOOGLEANALYTIC_ID: ${{ vars.PUBLIC_GOOGLEANALYTIC_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout external content
        uses: actions/checkout@v4
        with:
          repository: riceball-tw/obsidian-sync
          ref: main
          path: src/content-temp/
          token: ${{ secrets.CHECKOUT_GITHUB_CONTENT_PAT }}
          lfs: true

      - name: Merge local and external content folder
        run: rsync -av --ignore-existing src/content-temp/ src/content/

      - name: Environment Setup
        uses: ./.github/actions/setup

      - name: Setup Playwright
        uses: ./.github/actions/setup-playwright

      # 1. List all LFS files
      # 2. Extract the first column (ID)
      # 3. Sort the IDs
      # 4. Save the IDs to a file named .lfs-assets-id
      - name: Create LFS file list
        run: git lfs ls-files --long | cut -d ' ' -f1 | sort > .lfs-assets-id

      - name: LFS Cache
        uses: actions/cache@v4
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-
      - name: Git LFS Pull
        run: git lfs pull

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  lighthouse:
    needs: build
    runs-on: ubuntu-latest
    env:
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Environment Setup
        uses: ./.github/actions/setup

      - name: Run Lighthouse CI
        run: pnpm lighthouse

  deploy:
    needs: lighthouse
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Environment Setup
        uses: ./.github/actions/setup

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy --branch=${{ github.ref_name }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
