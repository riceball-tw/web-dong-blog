name: Deploy Pipeline
on: [push]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # 1. List all LFS files
      # 2. Extract the first column (ID)
      # 3. Sort the IDs
      # 4. Save the IDs to a file named .lfs-assets-id
      - name: List all LFS files and save their IDs to a file
        run: |
          git lfs ls-files --long | cut -d ' ' -f1 | sort > .lfs-assets-id
          git lfs pull
      # Cache LFS
      - name: Cache LFS
        uses: actions/cache@v3
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

  lint:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Run paraglide i18n compiler
        run: npx @inlang/paraglide-js compile --project ./project.inlang --outdir ./src/paraglide

      - name: Run Lint
        run: pnpm lint

  typecheck:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Run Typecheck
        run: pnpm typecheck

  build-prod:
    if: github.ref == 'refs/heads/main'
    needs: prepare
    runs-on: ubuntu-latest
    env:
      YOUTUBEAPIKEY: ${{ secrets.YOUTUBEAPIKEY }}
      PUBLIC_GOOGLEANALYTIC_ID: ${{ vars.PUBLIC_GOOGLEANALYTIC_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  build-staging:
    if: github.ref != 'refs/heads/main'
    needs: prepare
    runs-on: ubuntu-latest
    env:
      YOUTUBEAPIKEY: ${{ secrets.YOUTUBEAPIKEY }}
      PUBLIC_GOOGLEANALYTIC_ID: ${{ vars.PUBLIC_GOOGLEANALYTIC_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: LFS Cache
        uses: actions/cache@v3
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Git LFS Pull
        run: git lfs pull

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Build and Test
        uses: cypress-io/github-action@v6
        with:
          build: pnpm build:staging
          start: pnpm preview

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  lighthouse:
    needs: [build-prod, build-staging]
    runs-on: ubuntu-latest
    env:
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Run Lighthouse CI
        run: pnpm lhci autorun

  deploy:
    needs: [lint, typecheck, lighthouse]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: astro-blog
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
